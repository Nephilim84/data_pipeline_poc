version : '3.8'
volumes:
    postgres:
    pgadmin:
    neo4j:
    #analytics:
    minio:

services:
# Structured Data source example #
  postgres-source:
    image: postgres
    restart: always
    container_name: postgres-source
    command: [ "postgres", "-c", "wal_level=logical" ]    
    ports:
      - 5432:5432
    user: "root"
    environment:
      POSTGRES_USER: "${SHARED_USER}"
      POSTGRES_PASSWORD: "${SHARED_PASS}"
      POSTGRES_DB: db
    volumes:
      #- postgres:/var/lib/postgresql/data
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/pgsql/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql

  postgres-sink:
    image: postgres
    hostname: postgres-sink
    container_name: postgres-sink
    environment:
      POSTGRES_USER: "${SHARED_USER}"
      POSTGRES_PASSWORD: "${SHARED_PASS}"
      POSTGRES_DB: db
    ports:
      - "5433:5432"
      
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: pg_admin
    environment:
      PGADMIN_DEFAULT_EMAIL: "${ADMIN_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${SHARED_PASS}"
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "False"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - ./config/pgadmin/docker_pgadmin_servers.json:/pgadmin4/servers.json      
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5434:80
      - 5435:443
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'postgres:5432:*:postgres:toor' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"      
    depends_on:
      - postgres-source
    links:
      - postgres-source:pgsql-server

# Unstructured Data source example #
  minio:
    image: minio/minio
    restart: always
    container_name: minio    
    environment:
      - MINIO_ACCESS_KEY=miniominio
      - MINIO_SECRET_KEY=miniominio
    volumes:
       - minio:/data
    ports:
      - 19000:9000
    command: ["server","/data"]
    # - server /data
    # python API : https://github.com/minio/minio-py
    # python SDK : https://docs.min.io/docs/python-client-api-reference.html

# DWH - Neo4j #
  neo4j:
      image: neo4j:3.5
      restart: always
      container_name: neo4j_database
      environment:
        NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
        # USERNAME/PASSWORD : neo4j
      volumes:
        - neo4j:/data
        - ./logs/neo4j:/logs
      ports:
        - 17474:7474
        - 17687:7687           

# ========================================================================== #
# Analytics #
  jupyter:
    container_name: "jupyter"
    restart: always
    image: jupyter/datascience-notebook #jupyter/scipy-notebook    
    ports:
      - 8888:8888
    volumes:
      #- ./data/jupyter
      #- ./logs/jupyter:/logs
      - ./work:/home/jovyan/work
      - ./config/jupyter/jupyter-config.json:/home/jovyan/.jupyter/jupyter_notebook_config.json
      #- ./config:/home/jovyan/.jupyter/config      
  rstudio:
    container_name: rstudio    
    restart: always
    image: rocker/tidyverse
    ports:
      - 9787:9787
    environment:
      - PASSWORD=rstudio1805 # USERNAME : rstudio
    volumes:
      - ./data/rstudio

# ========================================================================== #
# Kafka #
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  
  kafka:
    image: wurstmeister/kafka:2.11-2.0.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./plugins:/usr/local/share/kafka/plugins
  
  # Confluent registry
  # https://docs.confluent.io/platform/current/schema-registry/index.html
  confluent-registry:
    image: confluentinc/cp-schema-registry:6.0.1
    hostname: confluent-registry
    container_name: confluent-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_HOST_NAME: confluent-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  
  # Confluent connect
  # https://docs.confluent.io/platform/current/connect/index.html
  confluent-connect:
    image: confluentinc/cp-kafka-connect:6.0.1
    hostname: confluent-connect
    container_name: confluent-connect
    depends_on:
      - kafka
      - zookeeper
      - confluent-registry
    ports:
      - "8083:8083"
      - "9010:9010"
    environment:
      KAFKA_JMX_HOSTNAME: 127.0.0.1
      KAFKA_JMX_PORT: 9010
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: localhost
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-avro
      CONNECT_CONFIG_STORAGE_TOPIC: connect-avro-config
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-avro-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: connect-avro-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://confluent-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://confluent-registry:8081
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
    volumes:
      - ./plugins:/etc/kafka-connect/jars
  
  
# ========================================================================== #
  dash-frontend:
    build:
      context: ./frontend
    image: dash-frontend
    container_name: dash-frontend
    ports:
      - "8080:8050"
    restart: unless-stopped


#        superset:
#          container_name: "superset"
#          image: tylerfowler/superset
#          ports:
#            - 8088:8088
#          volumes:
#            - ./DockerShare:/DockerShare
#          # username: admin
#          # password: superset
#      # ========================================================================== #


      # ========================================================================== #
#  airflow:
#    container_name: "airflow"
#    image: airflowci/incubator-airflow-ci #puckel/docker-airflow
#    depends_on:
#      - postgres
#    environment:
#      - EXECUTOR=Local
#    ports:
#      - 8080:8080
#     volumes:
#       - ./DockerShare:/usr/local/airflow/dags
#     command: webserver
      # ========================================================================== #
 #       mongo:
 #         container_name: "mongo"
 #         image: mongo
 #         restart: always
 #         environment:
 #           MONGO_INITDB_ROOT_USERNAME: root
 #           MONGO_INITDB_ROOT_PASSWORD: example
 #         ports:
 #           - 27017:27017
 #     # ========================================================================== #
 #       mongo-express:
 #         container_name: "mongo-express"
 #         image: mongo-express
 #         restart: always
 #         ports:
 #           - 8081:8081
 #         environment:
 #           ME_CONFIG_MONGODB_ADMINUSERNAME: root
 #           ME_CONFIG_MONGODB_ADMINPASSWORD: example